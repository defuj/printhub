
class PrintHub{constructor({paperSize:e="58",printerType:t="bluetooth"}={}){if(this.encoder=new TextEncoder,this.center=new Uint8Array([27,97,1]),this.right=new Uint8Array([27,97,2]),this.left=new Uint8Array([27,97,0]),this.boldOn=new Uint8Array([27,69,1]),this.boldOff=new Uint8Array([27,69,0]),this.underlineOn=new Uint8Array([27,45,1]),this.underlineOff=new Uint8Array([27,45,0]),this.doubleSize=new Uint8Array([29,33,17]),this.normalSize=new Uint8Array([29,33,0]),this.printChar=null,this.printerType=t,"bluetooth"!==t&&"usb"!==t)throw new Error('Invalid printer type. Only "bluetooth" and "usb" are supported.');if("58"!==e&&"80"!==e)throw new Error('Invalid paper size. Only "58" and "80" are supported.');this.paperSize=e}setPaperSize(e){this.paperSize=e}async checkBluetooth(){return navigator.bluetooth.getAvailability()}async setDefault(e){e&&(await e.writeValue(this.left.buffer),await e.writeValue(this.normalSize.buffer),await e.writeValue(this.boldOff.buffer),await e.writeValue(this.underlineOff.buffer))}async writeLineBreak({count:e=1}={}){if(this.printChar)if("usb"===this.printerType)for(let t=0;t<e;t++){const e=[10];try{const t=this.printChar.configuration.interfaces[0].alternate.endpoints.find(e=>"out"===e.direction);if(!t)throw new Error("No suitable endpoint found for USB printing.");await this.printChar.transferOut(t.endpointNumber,new Uint8Array(e)),console.log("Data sent to USB printer.")}catch(e){console.error("Failed to print via USB:",e)}}else for(let t=0;t<e;t++)await this.printChar.writeValue(new Uint8Array([10]).buffer)}async writeDashLine(){if(this.printChar){if("usb"===this.printerType){const e=[...this.encoder.encode("-".repeat("58"===this.paperSize?32:42))];try{const t=this.printChar.configuration.interfaces[0].alternate.endpoints.find(e=>"out"===e.direction);if(!t)throw new Error("No suitable endpoint found for USB printing.");await this.printChar.transferOut(t.endpointNumber,new Uint8Array(e)),console.log("Data sent to USB printer.")}catch(e){console.error("Failed to print via USB:",e)}}else await this.printChar.writeValue(this.encoder.encode("-".repeat("58"===this.paperSize?32:42)));await this.writeLineBreak()}}async writeTextWith2Column(e,t,{bold:r=!1,underline:i=!1,align:n="left",size:a="normal"}={}){const o=this.printChar;if(o)if("usb"===this.printerType){const s=[27,33,r?8:0,27,45,i?1:0,27,97,"center"===n?1:"right"===n?2:0,29,33,"double"===a?17:0,...this.encoder.encode(this.createItemData(e,t)),10];try{const e=o.configuration.interfaces[0].alternate.endpoints.find(e=>"out"===e.direction);if(!e)throw new Error("No suitable endpoint found for USB printing.");await o.transferOut(e.endpointNumber,new Uint8Array(s)),console.log("Data sent to USB printer.")}catch(e){console.error("Failed to print via USB:",e)}}else{r&&await o.writeValue(this.boldOn.buffer),i&&await o.writeValue(this.underlineOn.buffer),"center"===n?await o.writeValue(this.center.buffer):"right"===n?await o.writeValue(this.right.buffer):await o.writeValue(this.left.buffer),"double"===a&&await o.writeValue(this.doubleSize.buffer),await o.writeValue(this.encoder.encode(this.createItemData(e,t))),await this.setDefault(o),await this.writeLineBreak()}}async writeText(e,{bold:t=!1,underline:r=!1,align:i="left",size:n="normal"}={}){const a=this.printChar;if(a)if("usb"===this.printerType){const o=[27,33,t?8:0,27,45,r?1:0,27,97,"center"===i?1:"right"===i?2:0,29,33,"double"===n?17:0,...this.encoder.encode(e),10];try{const e=a.configuration.interfaces[0].alternate.endpoints.find(e=>"out"===e.direction);if(!e)throw new Error("No suitable endpoint found for USB printing.");await a.transferOut(e.endpointNumber,new Uint8Array(o)),console.log("Data sent to USB printer.")}catch(e){console.error("Failed to print via USB:",e)}}else{t&&await a.writeValue(this.boldOn.buffer),r&&await a.writeValue(this.underlineOn.buffer),"center"===i?await a.writeValue(this.center.buffer):"right"===i?await a.writeValue(this.right.buffer):await a.writeValue(this.left.buffer),"double"===n&&await a.writeValue(this.doubleSize.buffer),await a.writeValue(this.encoder.encode(e)),await this.setDefault(a),await this.writeLineBreak()}}async connectToPrint({onReady:e,onFailed:t}){try{if("usb"===this.printerType)await navigator.usb.requestDevice({filters:[]}).then(async t=>{await t.open(),await t.selectConfiguration(1),await t.claimInterface(0),this.printChar=t,e(this)}).catch(e=>{t(e.message)});else if("bluetooth"===this.printerType)if(await this.checkBluetooth())if(null==this.printChar)navigator.bluetooth.requestDevice({filters:[{acceptAllDevices:!0,services:["000018f0-0000-1000-8000-00805f9b34fb"]}]}).then(e=>{const t=document.getElementById("status");return t&&(t.textContent="Got device: "+e.name),e.gatt.connect()}).then(e=>{const t=document.getElementById("status");return t&&(t.textContent+="\nConnected to GATT Server"),e.getPrimaryService("000018f0-0000-1000-8000-00805f9b34fb")}).then(e=>e.getCharacteristics()).then(r=>{const i=document.getElementById("status");i&&(i.textContent+="\nGot characteristics");let n=null;r.forEach(e=>{console.log("Characteristic UUID: "+e.uuid),e.properties.write&&(n=e,this.printChar=n)}),n?e(this):t("No writable characteristic found.")}).catch(e=>{console.error(e);const r=document.getElementById("status");r&&(r.textContent="Error: "+e),t(e.message)});else e(this);else t("Perangkat Anda tidak mendukung untuk melakukan print dengan Bluetooth");else t("Printer type not supported.")}catch(e){t(e.message)}}createItemData(e,t){const r="58"==this.paperSize?32:42,i=3;if(e.length+t.length>r){const n=r-t.length-i;e=n>0?e.substring(0,n)+"   ":"   "}return e+" ".repeat(r-e.length-t.length)+t}}